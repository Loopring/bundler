/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace WalletFactory {
  export type WalletConfigStruct = {
    owner: PromiseOrValue<string>;
    guardians: PromiseOrValue<string>[];
    quota: PromiseOrValue<BigNumberish>;
    inheritor: PromiseOrValue<string>;
    feeRecipient: PromiseOrValue<string>;
    feeToken: PromiseOrValue<string>;
    maxFeeAmount: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type WalletConfigStructOutput = [
    string,
    string[],
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    owner: string;
    guardians: string[];
    quota: BigNumber;
    inheritor: string;
    feeRecipient: string;
    feeToken: string;
    maxFeeAmount: BigNumber;
    salt: BigNumber;
    signature: string;
  };

  export type WalletConfigV2Struct = {
    owner: PromiseOrValue<string>;
    initOwner: PromiseOrValue<string>;
    guardians: PromiseOrValue<string>[];
    quota: PromiseOrValue<BigNumberish>;
    inheritor: PromiseOrValue<string>;
    feeRecipient: PromiseOrValue<string>;
    feeToken: PromiseOrValue<string>;
    maxFeeAmount: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type WalletConfigV2StructOutput = [
    string,
    string,
    string[],
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    initOwner: string;
    guardians: string[];
    quota: BigNumber;
    inheritor: string;
    feeRecipient: string;
    feeToken: string;
    maxFeeAmount: BigNumber;
    salt: BigNumber;
  };
}

export interface WalletFactoryInterface extends utils.Interface {
  functions: {
    "CREATE_WALLET_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "WALLET_CREATION()": FunctionFragment;
    "addOperator(address)": FunctionFragment;
    "computeWalletAddress(address,uint256)": FunctionFragment;
    "computeWalletSalt(address,uint256)": FunctionFragment;
    "createWallet((address,address[],uint256,address,address,address,uint256,uint256,bytes),uint256)": FunctionFragment;
    "createWalletByOperator((address,address,address[],uint256,address,address,address,uint256,uint256),uint256)": FunctionFragment;
    "getWalletCode()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "numOperators()": FunctionFragment;
    "operators()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "walletImplementation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CREATE_WALLET_TYPEHASH"
      | "DOMAIN_SEPARATOR"
      | "WALLET_CREATION"
      | "addOperator"
      | "computeWalletAddress"
      | "computeWalletSalt"
      | "createWallet"
      | "createWalletByOperator"
      | "getWalletCode"
      | "isOperator"
      | "numOperators"
      | "operators"
      | "owner"
      | "removeOperator"
      | "renounceOwnership"
      | "transferOwnership"
      | "walletImplementation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CREATE_WALLET_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_CREATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeWalletAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeWalletSalt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet",
    values: [WalletFactory.WalletConfigStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createWalletByOperator",
    values: [WalletFactory.WalletConfigV2Struct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numOperators",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operators", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "walletImplementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CREATE_WALLET_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_CREATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeWalletSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWalletByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletImplementation",
    data: BytesLike
  ): Result;

  events: {
    "OperatorAdded(address)": EventFragment;
    "OperatorRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WalletCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletCreated"): EventFragment;
}

export interface OperatorAddedEventObject {
  operator: string;
}
export type OperatorAddedEvent = TypedEvent<[string], OperatorAddedEventObject>;

export type OperatorAddedEventFilter = TypedEventFilter<OperatorAddedEvent>;

export interface OperatorRemovedEventObject {
  operator: string;
}
export type OperatorRemovedEvent = TypedEvent<
  [string],
  OperatorRemovedEventObject
>;

export type OperatorRemovedEventFilter = TypedEventFilter<OperatorRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WalletCreatedEventObject {
  wallet: string;
  owner: string;
}
export type WalletCreatedEvent = TypedEvent<
  [string, string],
  WalletCreatedEventObject
>;

export type WalletCreatedEventFilter = TypedEventFilter<WalletCreatedEvent>;

export interface WalletFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CREATE_WALLET_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    WALLET_CREATION(overrides?: CallOverrides): Promise<[string]>;

    addOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeWalletAddress(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeWalletSalt(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createWallet(
      config: WalletFactory.WalletConfigStruct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createWalletByOperator(
      config: WalletFactory.WalletConfigV2Struct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWalletCode(overrides?: CallOverrides): Promise<[string]>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numOperators(overrides?: CallOverrides): Promise<[BigNumber]>;

    operators(overrides?: CallOverrides): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    walletImplementation(overrides?: CallOverrides): Promise<[string]>;
  };

  CREATE_WALLET_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  WALLET_CREATION(overrides?: CallOverrides): Promise<string>;

  addOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeWalletAddress(
    owner: PromiseOrValue<string>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  computeWalletSalt(
    owner: PromiseOrValue<string>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createWallet(
    config: WalletFactory.WalletConfigStruct,
    feeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createWalletByOperator(
    config: WalletFactory.WalletConfigV2Struct,
    feeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWalletCode(overrides?: CallOverrides): Promise<string>;

  isOperator(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numOperators(overrides?: CallOverrides): Promise<BigNumber>;

  operators(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  walletImplementation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CREATE_WALLET_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    WALLET_CREATION(overrides?: CallOverrides): Promise<string>;

    addOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeWalletAddress(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    computeWalletSalt(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createWallet(
      config: WalletFactory.WalletConfigStruct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createWalletByOperator(
      config: WalletFactory.WalletConfigV2Struct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWalletCode(overrides?: CallOverrides): Promise<string>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numOperators(overrides?: CallOverrides): Promise<BigNumber>;

    operators(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    walletImplementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OperatorAdded(address)"(
      operator?: PromiseOrValue<string> | null
    ): OperatorAddedEventFilter;
    OperatorAdded(
      operator?: PromiseOrValue<string> | null
    ): OperatorAddedEventFilter;

    "OperatorRemoved(address)"(
      operator?: PromiseOrValue<string> | null
    ): OperatorRemovedEventFilter;
    OperatorRemoved(
      operator?: PromiseOrValue<string> | null
    ): OperatorRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "WalletCreated(address,address)"(
      wallet?: null,
      owner?: null
    ): WalletCreatedEventFilter;
    WalletCreated(wallet?: null, owner?: null): WalletCreatedEventFilter;
  };

  estimateGas: {
    CREATE_WALLET_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    WALLET_CREATION(overrides?: CallOverrides): Promise<BigNumber>;

    addOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeWalletAddress(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeWalletSalt(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createWallet(
      config: WalletFactory.WalletConfigStruct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createWalletByOperator(
      config: WalletFactory.WalletConfigV2Struct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWalletCode(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numOperators(overrides?: CallOverrides): Promise<BigNumber>;

    operators(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    walletImplementation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CREATE_WALLET_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WALLET_CREATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeWalletAddress(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeWalletSalt(
      owner: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWallet(
      config: WalletFactory.WalletConfigStruct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createWalletByOperator(
      config: WalletFactory.WalletConfigV2Struct,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWalletCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    walletImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
